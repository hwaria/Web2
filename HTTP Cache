생활코딩 – HTTP Cache: 웹의 성능을 향상시키는 핵심 메커니즘

1.	수업 소개
-	Cache: http 프로토콜의 기능 중 하나로, “저장한다”는 의미
-	웹이 성장하면서 전송되는 정보의 크기가 급격히 팽창 – 전송 속도를 높이기 위해서 고안한 방법 중 하나로 ‘캐쉬’를 만듦
-	이미 다운받은 파일은 컴퓨터에 저장(캐쉬)해뒀다가 같은 주소로 접속할 때 캐쉬해둔 파일을 이용하여 네트워크에 접속할 필요 없이 파일을 불러들일 수 있음
-	그러나 웹 브라우저는 내용이 갱신된 후에도 오래된 파일을 불러들일 수 있음: 캐쉬를 최신 상태로 유지하는 것이 어려움
-	캐쉬를 만들고, 조정하는 방법을 배우게 될 것임 -> 최신 상태를 유지하는 웹의 장점과 눈 깜짤할 사이에 실행되는 앱의 장점을 모두 갖춘 웹 애플리케이션을 만들 준비를 갖추게 됨 

2.	수업 준비
-	일부로 웹이 늦게 로딩하는 환경을 만듦 – 크롬, 검사, 네트워크, 온라인 -> ‘slow 3g’ – 새로 고침
-	비트나미 mamp - 아파치 웹 서버 – configure – open conf file – yes – httpd.conf 파일: 아파치의 동작을 변경시키는 설정들이 저장되어 있음 – 캐쉬 설정을 변경 후 아파치 서버를 리스타트

3.	캐쉬를 금지하는 법 (Cache Control: no store): 웹 브라우저가 캐쉬를 못 하게 하는 방법
-	아파치 설정 바꾸기: httpd.conf 파일 맨 끝에 다음 추가
-	SetEnv no-gzip 1 : 아파치가 가지고 있는, 파일을 압축하는 기능이 캐쉬를 혼란스럽게 할 수 있기때문에 압축기능을 잠시 끔
-	Header set Cache-Control “no-store” : 캐쉬를 하지 말 것을 요구
-	네트워크 – preserve log 체크 – hard reload: 캐쉬를 지운 후 다시 다운로드 받는 기능 – 네트워크탭에서 html, jpg파일을 다운받는데 걸린 시간 확인 가능
-	메인페이지에 있는 다른 링크를 누르면 똑같은 파일을 다시 같은 시간에 걸쳐 다운받음: 비효율적!
-	Response headers – “cache-control: no-store” : 캐쉬를 저장 안 하고 있음, 사이트가 개편되었을 때 사용자들은 최신 버전의 사이트를 다운받아 볼 수 있음

4.	캐쉬를 사용하는 법 (Cache-Control: maxAge): 캐쉬의 만료시간을 지정해서 캐쉬를 활성화하는 법
-	HTTP caching – Cache-Control – Expiration – max-age: 31536000 (초단위로 1년에 해당 )캐시를 생성한 후 수명을 지정
-	Header set Cache-Control “max-age=31536000” 변경 후 리스타트 – 링크로 다시 접속하면 데이터를 훨씬 빨리 불러옴 – size: from disk cache, 파일을 메모리에서 가져오고 네트워크를 사용하지 않았음 -> 사용자입장에서는 반응성이 좋아지고, 서비스제공업자 입장에서는 통신요금이 줄어듬 
-	문제점: 신선도.. html파일에서 수정이 이뤄졌음에도 불구하고 링크 클릭시 새로운 내용을 가져오지 않고 캐쉬에서 저장된 오래된 정보를 가져옴 
-	성능이 좋으면서도 신선도를 유지할 방법을 고안
	Max-age 값을 5로 바꾸면 5초에 한번씩 정보 갱신 
-	Response headers – last-modified: html파일이 마지막으로 수정된 시점
-	Request headers – if-modified-since: 브라우저에서 html파일이 마지막으로 수정된 시점
-	General: status code 304 not modified 변경된 것이 없음 / 200 ok 마지막으로 서버쪽에서 파일을 수정한 시점 알려줌 
-	Max-age 값을 0으로 바꾸면 요청을 할때마다 확인해서 변경되었을때마다 다운로드 = no cache
5.	ETag: 오리지널 컨텐츠의 내용을 기반으로 캐쉬 여부를 지정하는 방법 
-	Reponse headers – last-modified에 저장된 시각을 기준으로 가지고 있는 웹브라우저가 가지고 있는 정보가 최신인지 아닌지 확인 -> 경우에 따라서 부정확할 수 있음 -> 웹브라우저가 가지고 있는 etag 정보가 웹서버가 가지고 있는 파일의 etag값과 매치하는지를 확인
-	Etag: 웹서버는 자기가 서비스하는 파일에 대한 고유한 etag를 만들어서 웹브라우저에 보내줘야 한다.
-	Request headers – if-modified-since & if-none-match의 etag값을 확인해서 하나라도 값이 다른 경우 파일 새로 보냄

6.	캐쉬 정책 
-	
-	파일을 다운받았는데 그 파일을 다시 쓸거냐? 필요없으면 no-store, revalidate each time? No-cache  
-	캐싱서버: 한국에 있는 웹서버의 정보를 미국에 잇는 캐싱서버에 저장하면 다른 나라의 사용자들이 빨리 정보를 받을 수 있음
-	캐쉬컨트롤을 private/public -> 속도 향상, 보안성의 문제
-	Maximum cache lifetime 조정이 필요할땐 max-age값을 조정 

7.	수업을 마치며
-	http의 성능을 향상시키고 인터넷 자원을 아껴쓸 수 있는 기능인 캐쉬를 배움
-	앞으로 관심가질 것
	캐쉬를 잘 설정했는지 확인하는 방법: 개발자 도구 검사 기능 활용
	캐쉬를 적극적으로 활용하는 트렌드: progressive web application, application cache 인터넷이 끊겨있어도 캐쉬된 데이터를 이용해서 웹애플리케이션이 동작하게 함 
	서버측에서 동작하는 캐쉬: Memcached 캐쉬데이터를 메모리에 저장했다가 같은 페이지에 대한 요청이 있으면 메모리에 저장된 데이터를 웹서버대신 배포해줌. 고속으로 컨텐츠를 제공
	캐슁서버: 전세계에 배치하여 사용자의 요청이 잇을때 가장 가까운 캐싱서버가 응답하는 content delivery network (CDN)

