생활코딩 – JavaScript

16. 조건문 
-	boolean을 활용해서 조건에 따라 실행되는 코드만들기
-	if 조건문이 ‘true’일 경우 else문 코드는 실행되지 않음
-	boolean의 값에 따라서 실행되는 코드가 바뀜

17. 조건문의 활용
-	버튼만들기 <input type=”button” value=”night”>
-	버튼의 value값이 “night”라면 버튼을 눌럿을때 야간모드로 css속성을 바꿔주고, “night”가 아니라면 주간모드로 css속성을 바꿔주는 버튼만들기

-	버튼의 value값 가져오기
Document.querySelctor(‘#night_day’).value -> “night”
위를 활용해서 조건문 설정
<input id=”night_day” type=”button” value=”night” onclick=”
 If (Document.querySelctor(‘#night_day’).value === “night”
) {
  Document.querySelector(‘body’).style.backgroundcolor =”black”;
Document.queryselector(‘body’).sytle.color=”white”;
Document.querySelctor(‘#night_day’).value = “day”; //css 속성 바꾼 후 value 값 바꿔주기
 } else {
  Document.querySelctor(‘body’).style.backgroundcolor=”white”;
Document,querySelector(‘body’).sytle.color=”black”;
Document.querySelctor(‘#night_day’).value = “night”;
}”>

18. 리팩토링 (refactoring): 중복의 제거
-	비효율적인 코드를 개선 -> 유지보수가 쉬워짐, 성능이 좋아짐
-	위의 코드를 개선해보자:
1)	onclick 이후의 이벤트 코드의 대상은 모두 자기 자신을 가리키고 있음 -> this 사용
2)	queryselector(‘body’) 태그 중복 사용되므로 변수에 저장 -> var target = document.queryselector(‘body’)
<input id=”night_day” type=”button” value=”night” onclick=”
 var target = document.queryselector(‘body’)
 If (Document.querySelctor(‘#night_day’) This.value === “night”
) {
  Document.querySelector(‘body’)target.style.backgroundcolor =”black”;
Document.queryselector(‘body’)target.stylle.color=”white”;
This.value = “day”; //css 속성 바꾼 후 value 값 바꿔주기
 } else {
  Document.querySelctor(‘body’)target.style.backgroundcolor=”white”;
Document,querySelector(‘body’)target.style.color=”black”;
This.value = “night”;
}”>
	중복되는 모든 코드는 없애려고 노력하자

19. 반복문 예고: 웹페이지의 모든 링크의 속성을 바꿔야할 경우, 반복문을 사용할 수 있음
-	모든 a링크를 불러들여 번수(배열로서)에 저장한 후 반복문 설정

20. 배열(array): 데이터를 성격에 따라 분류하여 관리
-	배열만들기: 대괄호 [ ] 안에 데이터들을 입력하여 만듦
var coworkers = [“egoing”, “leezche”]
-	배열의 값 가져오기: 인덱스를 활용해서 가져옴
Coworkers[0] => “egoing”
-	배열의 값 갯수: 
Coworkers.length => 2
-	배열에 값 추가하기:
Coworkers.push(“duru”) 

21. 반복문(loop): 순서대로 실행되는 프로그램의 실행 순서를 제어
- 반복문의 종료 시점을 잘 정해야함
Var I = 0;
While (I < 3) { //코드가 한번씩 실행될 때마다 i의 값이 1씩 증가하고 3보다 작지 않으면 종료되고 반복문 다음의 코드가 실행됨
	실행할 코드 1
	실행할 코드 2
	I = I + 1;
}

22. 배열과 반복문
- 연관된 데이터를 배열로 만들어 순차적으로 아이템을 꺼내서 프로그램을 실행되도록 함
- var fruits = [“banana”, “mango”, “orange”, “grape”]
<ul>
<script>
Var I = 0;
While (I < 4) {
Document.write(‘<li>’ + fruits[i] + ‘</li>’);
I = I + 1;
}
</script>
</ul>

-	위 코드는 데이터가 바뀔 때마다 로직(조건문)까지 함께 바꿔줘야함..
-	“I < 4” -> fruits.length

23. 배열과 반복문의 활용
- document.querySelector(“a”)를 하면 맨 첫 번째 a 링크만 가져옴
- document.querySelectorAll(‘a’) -> [a, a, a, a] 모든 a링크를 가져왔으니 변수에 저장
Var alist = document.querySelctorAll(‘a’);
Var I = 0;
While (I < alist.length) {
  alist[i].style.color=”powderblue” //반복문이 지날때마다 배열의 각각의 아이템을 가리킴
  I = I + 1;
}
 
24. 함수 예고
- 코드가 많아질 경우 함수를 이용해서 정리정돈
- input 버튼, 온클릭 이벤트에 대한 조건문, 변수 정의 등 많은 코드들을 함수로 빼서 정의한 후, 그 함수명을 버튼에서 정의해줌

25. 함수(function)
- 기본 문법
Function 함수 이름() {
  재사용하고 싶은 코드;
}
	함수를 불러낼 때마다 재사용하고 싶은 코드를 실행

28. 함수의 활용: 리팩토링에서 중요한 역할을 함
- 중복되는 코드를 빼서 함수로 만듦
Function nightDayHandler() {
var target = document.queryselector(‘body’)
 If (This.value === “night”
) {
 target.style.backgroundcolor =”black”;
target.stylle.color=”white”;
This.value = “day”; //css 속성 바꾼 후 value 값 바꿔주기
 } else {
target.style.backgroundcolor=”white”;
target.style.color=”black”;
This.value = “night”;
}”>
}
<input type =”button” value=”night” onclick=”nightDayHandler();”>
	이렇게 하면 nightDayHandler 함수 내에 정의된 “this”가 input 버튼을 가르키지 않고 전역객체를 가르키게 되어 함수가 제대로 동작하지 않음! (전역객체가 뭔지 나중에 배우자)
	This의 값이 input버튼을 가리키게 하기 위해서 함수가 실행될때 this값을 줌
<input type =”button” value=”night” onclick=”nightDayHandler(this);”>
function nightDayHandler(self) {// self라는 이름의 매개변수를 정의한 후 this -> self로 변경
	var target = document.queryselector(‘body’)
 If (self.value === “night”
) {
 target.style.backgroundcolor =”black”;
target.stylle.color=”white”;
self.value = “day”; //css 속성 바꾼 후 value 값 바꿔주기
 } else {
target.style.backgroundcolor=”white”;
target.style.color=”black”;
self.value = “night”;
}”>
}

29. 객체(object) 예고
- 함수라는 기반 위에 존재 
- 코드를 정리하는 함수들이 많아지면 객체를 이용해서 정리: 서로 연관된 함수와 변수를 같은 이름으로 그루핑
-> 이때까지 만든 코드 (하기 이미지 참조)를 중복된 코드를 없애서 최대한 함수로 만든 후, 함수들을 정리해야할 단계까지 일단 만들어보기
1) var alist, 반복문을 function setColor(color) {} 로 만든 다음 코드 붙여넣기 - style.color = color로 변경
2) body태그의 폰트색을 바꾸는 var target, if조건문을 function setColor(color) {} 코드 붙여넣기 
-> 스타일태그의 색깔을 바꾸는 “setColor”라는 함수명이 중복됨, 이런 경우 후에 지정된 함수가 앞의 함수를 덮어쓰게 됨. 후에 함수가 많아지면 모든 함수의 이름을 기억할 수가 없기 때문에 함수명을 최대한 직관적으로, 명확히 지정해주는것이 좋음 -> 1)의 함수명을 linksSetColor(color)로, 2)의 함수명을 BodySetColor(color)로 변경
3) body태그의 배경색을 바꾸는 function BodySetBackgroundColor(color) 함수 만들기 
-> 객체를 이용하면 위의 함수들을 더 깔끔하게 정리할 수 있음: ‘body’라는 객체를 만들어 body.setBackgroundCOlor(‘black’), body.setColor(‘white’) 등으로 변경 -> 객체 만들기는 33.객체의 활용에서!
- 객체에 속해있는 함수는 함수가 아니라 ‘메소드’라 부름
 

30. 객체 쓰기와 읽기 
- 배열은 정보를 담는 그릇이며 동시에 정보가 순서대로 저장된다는 특징이 있음
- 객체는 정보를 담으나 순서대로 저장되지 않음, 그러나 어떤 순서가 없어도 상자의 정보를 꺼내 쓸려면 정보의 이름이 필요.
- 객체 만들기: object literal을 만드려면 중괄호를 씀
Var coworkers = {
“programmer”: “egoing”, // “egoing”이라는 정보를 저장하기 위해 프로그래머라는 이름을 붙여주는 것!
“designer”: “leezche” 
};
Document.write(“programmer : “ + coworkers.programmer); -> “egoing”
// coworkers.programmer 객체의 정보에 접근하는 방법(object access operator)
-	객체에 정보 추가하려면? 
Coworkers.bookkeeper = “duru”;
Coworkers.[“data scientist”] = “taeho”;
Document.write(“data scientis : “ + coworkers.[“data scientist”] +”<br>”); -> data scientist: taeho

31. 객체와 반복문
- 객체 내의 정보 다 가져오려면? 반복문쓰기!
- 객체에서는 반복문을 어떻게 쓰나? For in 구문써보기
For ( var key in coworkers(객체 이름) ) // coworkers라는 변수가 가리키는 객체의 key값(위의 예에서 정보의 이름, programmer, designer..)을 가져오는 반복문 -> coworkers의 key 값 하나하나마다 코드를 실행해줌
 Document.write(key + “<br>”);
}. 
	Programmer
Designer
Bookkeeper
Data scientist
-	Key값을 인덱스로 주면? 객체의 키값에 해당하는 데이터를 가져옴
For (var key in coworkers) {
Document.write(coworkers[key] + “<br>”)
}
	Egoing
Leezche
Duru
Taeho
-	하지만 객체는 순서를 보장하지는 않으므로 위의 값들은 순서대로 나오지 않을 수 있음

32. 객체프로퍼티와 메소드
- 객체는 문자, 배열, 숫자, 함수 등 다양한 것을 담을 수 있음
- 객체에 함수 담아보기 (method)
Coworkers.showAll = function() {.  // 객체 coworkers에 showAll이라고 하는 메소드담기!
	For (var key in this) { // coworkers라는 객체 이름이 메소드에 있으면 데이터를 제대로 못 불러올수 있으므로 coworkers -> this로 변경
Document.write(key +” : “ + this[key] + “<br>”);
}
}
Coworkers.showAll();
	객체 저장된 모든 정보를 가져옴
-	객체에 소속된 변수는 “프로퍼티”라고 함

33. 객체의 활용
- 객체의 예고에서 제대로 정리하지 않았던 코드들 (하기 이미지)을 객체개념을 활용하여 정리하기
 

-	바디태그의 속성색을 바꿔주는 함수를 모은 객체 body를 만듬
 

-	모든 링크의 색을 바꿔주는 코드도 “links”로 객체화하기
-	객체가 많아지면 어떻게 객체들을 정리할까?

34. 파일로 쪼개서 정리 정돈하기
- 연관된 코드들을 파일로 묶어서 그루핑
- 웹페이지마다 있는 스크립트태그의 자바스크립트 태그를 수정해야할 경우 각 페이지마다 들어가서 코드를 변경하는 것이 어려움 -> 자바스크립트 코드만 저장하고 있는 스크립트파일을 만든 후 각페이지에서 <script src=”파일이름.js”> 로 연결시켜 줌 
- 네트워크 트래픽 절감, 캐쉬 절약하여 효율적이고 비용절감!

35. 라이브러리와 프레임워크: 다른 사람의 생산물을 소비해서 나의 소프트웨어 생산하기
- library: 내가 만들고자 하는 프로그램에 필요한 부품이 되는 것들이 잘 정돈되어 있는 소프트웨어, jQuery
- framework: 반제품 같은 것. 만들고자 하는 것에 필요한, 공통이 되는 부분을 이미 만들어져 있는 것을 사용하는 것
- jQuery 사용해보기
36. UI vs API
- UI: user interface, 사용자가 시스템을 제어하기 위해서 사용하는 조작 장치(click 버튼같은 것)
- API: application programming interface, 애플리케이션을 만들기 위해서 프로그래밍을 할 때 사용하는 조작장치(함수 alert을 사용해서 버튼을 클릭하면 경고창을 띄우는 기능), 프로그래머는 자바스크립트를 사용하여 API를 결합하여 애플리케이션(응용 프로그램)을 만듦

37. 수업을 마치며
- 프로젝트를 시작하려면? 모든 개념을 사용하려고 하지말고, 꼭 필요한 최소한의 도구를 사용하면 됨
- 순서에 따라서 실행되어야 하는 명령들이 실행되도록 하기
- 앞으로 마주치게 될 한계: document 객체를 좀 더 자세히 살펴보기, DOM 살펴보기, window 객체 살펴보기, ajax: 웹페이지를 리로드하지 않고 정보를 변경하고 싶을때, cookie 웹페이지가 리로드되어도 현재 상태를 유지하고 싶을때: 사용자를 위한 개인화된 서비스 제공 offline web application 인터넷이 끊겨도 동작하는 웹페이지 만들려면, webRTC: 화상통신 웹 앱을만들고 싶으면, speech: 음성인식, 음성으로 정보 전달, webGL 3차원 그래픽으로 게임만드려면, webVR 가상현실  
